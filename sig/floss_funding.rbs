module FlossFunding
  class Error < StandardError
  end

  class ActivationEvent
    attr_reader silent: untyped
    attr_reader activation_key: String
  end

  class Namespace
    attr_reader name: String
    attr_reader env_var_name: String
    attr_reader activation_key: String
    attr_reader state: String
    attr_accessor activation_events: Array[ActivationEvent]

    def check_unpaid_silence: (String) -> bool
    def floss_funding_decrypt: (String) -> (String | false)
    def merged_config: -> ::FlossFunding::Configuration
  end

  class Configuration
    include Enumerable[Array[untyped]]

    def self.merged_config: (Array[::FlossFunding::Configuration]) -> ::FlossFunding::Configuration
    def initialize: (?Hash[untyped, untyped]) -> void
    def []: (String | Symbol) -> Array[untyped]
    def fetch: (String | Symbol, ?untyped) { (String | Symbol) -> untyped } -> Array[untyped]
    def each: () { (String, Array[untyped]) -> void } -> void
    def keys: -> Array[String]
    def key?: (String | Symbol) -> bool
    def include?: (String | Symbol) -> bool
    def has_key?: (String | Symbol) -> bool
    def to_h: -> Hash[String, Array[untyped]]
    def size: -> Integer
    def empty?: -> bool
  end

  # Constants
  FREE_AS_IN_BEER: String
  BUSINESS_IS_NOT_GOOD_YET: String
  NOT_FINANCIALLY_SUPPORTING: String
  START_MONTH: Integer
  BASE_WORDS_PATH: String
  EIGHT_BYTES: Integer
  HEX_LICENSE_RULE: Regexp
  FOOTER: String
  
  module Constants
    DEFAULT_PREFIX: String
    SILENT: bool
  end
  
  module Version
    VERSION: String
  end

  # Singleton methods on FlossFunding
  def self.mutex: -> Mutex

  def self.namespaces: -> Hash[String, Namespace]
  def self.namespaces=: (Hash[String, Namespace]) -> void

  # All namespaces as Namespace objects
  def self.all_namespaces: -> Array[Namespace]
  # All namespace names as strings
  def self.all_namespace_names: -> Array[String]

  # Active/inactive/invalid lookups by name
  def self.activated_namespace_names: -> Array[String]
  def self.unactivated_namespace_names: -> Array[String]
  def self.invalid_namespace_names: -> Array[String]

  def self.configurations: (?String) -> untyped
  def self.env_var_names: -> Hash[String, String]

  def self.activation_occurrences: -> Array[String]

  def self.base_words: (Integer) -> Array[String]

  module UnderBar
    SAFE_TO_UNDERSCORE: Regexp
    SUBBER_UNDER: Regexp
    INITIAL_UNDERSCORE: Regexp

    def self.env_variable_name: (String | ::FlossFunding::Namespace) -> String
    def self.to_under_bar: (String) -> String
  end

  module Config
    CONFIG_FILE_NAME: String

    def self.read_gemspec_data: (String) -> Hash[Symbol, untyped]
    def self.normalize_to_array: (untyped) -> Array[untyped]
  end

  module Check
    module ClassMethods
      def self.now_time: -> Time
      def self.now_time=: (Time) -> Time

      def base_words: -> Array[String]
      def check_activation: (String) -> bool
      def floss_funding_initiate_begging: (ActivationEvent) -> void
    end
  end

  module Poke
    def self.included: (Module) -> void
    def self.new: (String, ?{ namespace: String?, silent: untyped? }) -> Module
    def self.setup_begging: (Module, String?, String, untyped?) -> void
  end

  class ContraIndications
    def self.poke_contraindicated?: (untyped?) -> bool
    def self.at_exit_contraindicated?: -> bool
  end

  class ConfigNotFoundError < ::FlossFunding::Error
  end

  class ConfigLoader
    FLOSS_FUNDING_HOME: String
    DEFAULT_FILE: String

    def self.clear_options: -> void
    def self.configuration_file_for: (String) -> (String | nil)
    def self.load_file: (String, ?{ check: bool }) -> Hash[untyped, untyped]
    def self.default_configuration: -> untyped
  end
end
